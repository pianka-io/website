<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pytendo on Rick Pianka</title>
    <link>http://pianka.io/series/pytendo/</link>
    <description>Recent content in Pytendo on Rick Pianka</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Jan 2025 18:15:00 -0500</lastBuildDate>
    <atom:link href="http://pianka.io/series/pytendo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>pytendo: 6502 CPU progress</title>
      <link>http://pianka.io/blog/pytendo-6502-cpu/</link>
      <pubDate>Sun, 19 Jan 2025 18:15:00 -0500</pubDate>
      <guid>http://pianka.io/blog/pytendo-6502-cpu/</guid>
      <description>&lt;p&gt;This is a quick update, my pytendo CPU implementation hit a small milestone: it&amp;rsquo;s passing the&#xA;&lt;a href=&#34;http://nickmass.com/images/nestest.nes&#34;&gt;nestest ROM&lt;/a&gt; from &lt;a href=&#34;https://www.nesdev.org/wiki/Emulator_tests&#34;&gt;NesDev&amp;rsquo;s emulator tests&lt;/a&gt;!&#xA;I&amp;rsquo;ve implemented 149 of the &lt;a href=&#34;https://www.nesdev.org/wiki/Instruction_reference&#34;&gt;151 official instructions&lt;/a&gt; in the&#xA;&lt;a href=&#34;https://www.wikiwand.com/en/articles/MOS_Technology_6502&#34;&gt;MOS 6502&lt;/a&gt; (sans &lt;code&gt;brk&lt;/code&gt; and &lt;code&gt;cli&lt;/code&gt;), and none of the &lt;a href=&#34;https://www.nesdev.org/wiki/CPU_unofficial_opcodes&#34;&gt;unofficial&#xA;ones&lt;/a&gt;. I also ported it to run on my Windows 11 machine ðŸ˜Š&lt;/p&gt;&#xA;&lt;img class=&#34;flat&#34; src=&#34;https://pianka.io/blog/pytendo-6502-cpu/nestest.png&#34; alt=&#34;pytendo&#34; title=&#34;pytendo&#34;&gt;&#xA;&lt;p&gt;I also got the very basics of sprite rendering working:&lt;/p&gt;&#xA;&#xA;&#xA;    &#xA;    &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;&#xA;      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/fHUD39jUHQg?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&#xA;      &gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;p&gt;There are some small updates to the debugger, but I&amp;rsquo;ll save those for later â€“ that&amp;rsquo;s all for now.&lt;/p&gt;</description>
    </item>
    <item>
      <title>pytendo: a Python NES emulator written in C</title>
      <link>http://pianka.io/blog/pytendo-nes-emulator/</link>
      <pubDate>Fri, 03 Jan 2025 20:20:00 -0500</pubDate>
      <guid>http://pianka.io/blog/pytendo-nes-emulator/</guid>
      <description>&lt;p&gt;My holiday break project this year was to build an NES emulator in Python, sort of. Somewhere&#xA;between recently beating the &lt;a href=&#34;https://nandgame.com/&#34;&gt;NandGame&lt;/a&gt;, feeling nostalgia after seeing the&#xA;&lt;a href=&#34;https://github.com/PWhiddy/PokemonRedExperiments&#34;&gt;Pokemon Red Experiments&lt;/a&gt;, and getting a new graphics&#xA;card, I felt like building an NES emulator in Python that I could try to train an AI to play.&lt;/p&gt;&#xA;&lt;p&gt;So, I humbly introduce my latest project&amp;hellip;&lt;/p&gt;&#xA;&lt;img class=&#34;flat&#34; src=&#34;https://pianka.io/blog/pytendo-nes-emulator/pytendo.png&#34; alt=&#34;pytendo&#34; title=&#34;pytendo&#34;&gt;&#xA;&#xA;&lt;h2 id=&#34;the-design&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#the-design&#34;&gt;The Design&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;I started by building a multithreaded prototype in pure Python, using &lt;a href=&#34;https://www.pygame.org/&#34;&gt;pygame&lt;/a&gt; to draw frames&#xA;â€“  it was unsurprisingly slow.  I ported it to &lt;a href=&#34;https://cython.org/&#34;&gt;Cython&lt;/a&gt;, but it spent all its time thrashing&#xA;on the &lt;a href=&#34;https://wiki.python.org/moin/GlobalInterpreterLock&#34;&gt;Python GIL&lt;/a&gt;, the main thread starving the emulator&#xA;threads.  I refactored that implementation to be single-threaded as clock synchronization across threads is complex,&#xA;but the performance was simply not good enough.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
